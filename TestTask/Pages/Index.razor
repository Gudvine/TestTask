@page "/"
@using Microsoft.AspNetCore.Components.Forms;
@using TestTask.Data.Context;
@using TestTask.Data.Models;

<PageTitle>Тест задание</PageTitle>

<MudTabs Rounded="true" Centered="true" Color="Color.Warning" ActivePanelIndexChanged="@(() => Clear())">
    <MudTabPanel Text="Просмотр архивов" Icon="@Icons.Material.Filled.TableView">
        @if (_isDataLoading)
        {
            <MudProgressCircular Color="Color.Primary" />
        }
        else
        {
            if (WeatherArchives is not null)
            {
                <MudTable Height="700px" FixedFooter=true Virtualize=true FixedHeader=true Items="WeatherArchives">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<WeatherArchive, object>(x=>x.Date)">Дата</MudTableSortLabel></MudTh>
                        <MudTh>Время московское</MudTh>
                        <MudTh>T</MudTh>
                        <MudTh>Отн. влажность воздуха, %</MudTh>
                        <MudTh>Td</MudTh>
                        <MudTh>Направление ветра</MudTh>
                        <MudTh>Скорость ветра</MudTh>
                        <MudTh>Облачность, %</MudTh>
                        <MudTh>h</MudTh>
                        <MudTh>VV</MudTh>
                        <MudTh>Погодные явления</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Date</MudTd>
                        <MudTd>@context.MoscowTime</MudTd>
                        <MudTd>@context.T</MudTd>
                        <MudTd>@context.AirHumidity</MudTd>
                        <MudTd>@context.Td</MudTd>
                        <MudTd>@context.AirDirection</MudTd>
                        <MudTd>@context.AirSpeed</MudTd>
                        <MudTd>@context.Cloudness</MudTd>
                        <MudTd>@context.H</MudTd>
                        <MudTd>@context.VV</MudTd>
                        <MudTd>@context.Phenomena</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                    </PagerContent>
                </MudTable>
            }
            else
            {
                <MudText Typo="Typo.h6">БД пуста</MudText>
            }
        }
    </MudTabPanel>
    <MudTabPanel Text="Загрузка архивов" Icon="@Icons.Material.Filled.Upload">
        <MudFileUpload Accept=".xlsx,.xls" T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" AppendMultipleFiles Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
         @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
             <ButtonTemplate>
                 <MudPaper Height="300px" Outlined="true" Class="@DragClass">
                     <MudText Typo="Typo.h6">Нажмите или перетащите файлы в область</MudText>
                     @foreach (var file in fileNames)
                    {
                        <MudChip Color="Color.Dark" Text="@file" />
                    }
                </MudPaper>
            </ButtonTemplate>
        </MudFileUpload>
        <MudToolBar DisableGutters="true" Class="gap-4">
            @if (!_isUploading)
            {
                <MudButton Style="border-radius: 15px;" StartIcon="@Icons.Material.Filled.Upload" OnClick="Upload" Disabled="@(!fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Загрузить</MudButton>
                <MudButton Style="border-radius: 15px;" StartIcon="@Icons.Material.Filled.ClearAll" OnClick="Clear" Disabled="@(!fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Очистить</MudButton>
            }
            else
            {
                <MudProgressCircular Color="Color.Primary" />
            }
        </MudToolBar>
    </MudTabPanel>
</MudTabs>

@code {
    [Inject]
    ApplicationDbContext DbContext { get; set; } = null!;
    [Inject]
    ISnackbar Snackbar { get; set; } = null!;
    [Inject]
    WeatherArchiveService WeatherArchiveService { get; set; } = null!;

    private List<string> fileNames = new(); // Список имен файлов, отображаемых в кружке после загрузки в форму загрузки
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;

    List<WeatherArchiveFile> _filesToUpload { get; set; } = new();
    List<WeatherArchiveFile>? WeatherArchiveFiles { get; set; }
    List<ArchiveSheet>? ArchiveSheets { get; set; }
    List<WeatherArchive>? WeatherArchives { get; set; }

    const int MaxAllowedFiles = 10;
    bool _isUploading = false;
    bool _isDataLoading = false;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDataLoading = true;
            WeatherArchiveFiles = DbContext.WeatherArchiveFiles.ToList();
            ArchiveSheets = DbContext.ArchiveSheets.ToList();
            WeatherArchives = DbContext.WeatherArchives.ToList();
            _isDataLoading = false;
            StateHasChanged();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();

        if (e.FileCount > MaxAllowedFiles)
        {
            Snackbar.Add($"Превышено количество загружаемых файлов. Максимальное количество: {MaxAllowedFiles}", Severity.Error);
            return;
        }

        var files = e.GetMultipleFiles();

        foreach (var file in files)
        {
            fileNames.Add(file.Name);
            var fileToUpload = await WeatherArchiveService.ParseAndGetWeatherArchiveFile(file, file.Name);

            if (fileToUpload is not null)
                _filesToUpload.Add(fileToUpload);
        }
    }

    private async Task Clear()
    {
        fileNames.Clear();
        _filesToUpload.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private async Task Upload()
    {
        if (_filesToUpload.Count <= 0)
        {
            Snackbar.Add("Вы не прикрепили ни одного файла", Severity.Info);
            return;
        }

        _isUploading = true;

        try
        {
            await DbContext.WeatherArchiveFiles.AddRangeAsync(_filesToUpload);
            await DbContext.SaveChangesAsync();
        }
        catch (Exception)
        {
            Snackbar.Add("Что-то пошло не так", Severity.Error);
        }

        _isUploading = false;

        await UpdateData();

        Snackbar.Add("Файлы успешно загружены", Severity.Success);
        await Clear();
    }

    async Task UpdateData()
    {
        WeatherArchiveFiles = DbContext.WeatherArchiveFiles.ToList();
        StateHasChanged();
    }

    private void SetDragClass()
        => DragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => DragClass = DefaultDragClass;
}
