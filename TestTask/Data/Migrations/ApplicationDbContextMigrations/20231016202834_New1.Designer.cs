// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestTask.Data.Context;

#nullable disable

namespace TestTask.Data.Migrations.ApplicationDbContextMigrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231016202834_New1")]
    partial class New1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestTask.Data.Models.ArchiveSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int?>("WeatherArchiveFileId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeatherArchiveFileId");

                    b.ToTable("ArchiveSheets");
                });

            modelBuilder.Entity("TestTask.Data.Models.FileInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DocFiles");
                });

            modelBuilder.Entity("TestTask.Data.Models.WeatherArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AirDirection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("AirHumidity")
                        .HasColumnType("double precision");

                    b.Property<double>("AirSpeed")
                        .HasColumnType("double precision");

                    b.Property<int?>("ArchiveSheetId")
                        .HasColumnType("integer");

                    b.Property<double>("Cloudness")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("H")
                        .HasColumnType("double precision");

                    b.Property<string>("MoscowTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phenomena")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Pressure")
                        .HasColumnType("double precision");

                    b.Property<double>("T")
                        .HasColumnType("double precision");

                    b.Property<double>("Td")
                        .HasColumnType("double precision");

                    b.Property<double>("VV")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ArchiveSheetId");

                    b.ToTable("WeatherArchives");
                });

            modelBuilder.Entity("TestTask.Data.Models.WeatherArchiveFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WeatherArchiveFiles");
                });

            modelBuilder.Entity("TestTask.Data.Models.ArchiveSheet", b =>
                {
                    b.HasOne("TestTask.Data.Models.WeatherArchiveFile", null)
                        .WithMany("WeatherArchivesFileSheets")
                        .HasForeignKey("WeatherArchiveFileId");
                });

            modelBuilder.Entity("TestTask.Data.Models.WeatherArchive", b =>
                {
                    b.HasOne("TestTask.Data.Models.ArchiveSheet", null)
                        .WithMany("SheetWeatherArchives")
                        .HasForeignKey("ArchiveSheetId");
                });

            modelBuilder.Entity("TestTask.Data.Models.ArchiveSheet", b =>
                {
                    b.Navigation("SheetWeatherArchives");
                });

            modelBuilder.Entity("TestTask.Data.Models.WeatherArchiveFile", b =>
                {
                    b.Navigation("WeatherArchivesFileSheets");
                });
#pragma warning restore 612, 618
        }
    }
}
